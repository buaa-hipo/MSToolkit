#include <iostream>
#include "utils/cxxopts.hpp"
#include <filesystem>
#include <stdio.h>
#include "../graph/dependancy_graph.h"
#include <unordered_map>
#include <list>
#include <queue>
#include <string>
#include "comm_statistic.h"

namespace fs = std::filesystem;

std::string input_dir;

void parse(int argc, char *argv[]) {
    cxxopts::Options options("jsiread", "Read the measurement directory generated by jsirun.");
    options.add_options()
        ("h,help", "Print help")
        ("i,input", "Input measurement directory generated by jsirun", cxxopts::value<std::string>())
        ;

    try {
        auto result = options.parse(argc, argv);
        // print help message if configured
        if (result.count("help")) {
            std::cout << options.help() << std::endl;
            exit(1);
        }
        if (result.count("input")>=1) {
            if(result.count("input")>2) {
                std::cout << "Warning: multiple input directory configured. Only use the last one!" << std::endl;
            }
            input_dir = result["input"].as<std::string>();
        } else {
            std::cout << "-i or --input must be specified!" << std::endl;
            exit(1);
        }
        std::cout << "Configured: " << std::endl;
        std::cout << "\t" << "Input: " << input_dir << std::endl;
    } catch (cxxopts::exceptions::exception e) {
        std::cout << "Error: " << e.what() << std::endl;
        std::cout << options.help() << std::endl;
        exit(1);
    }
}

int main(int argc, char* argv[]) {
    parse(argc, argv);

    FILE *fp;
    fp = fopen( "comm_matrix.csv" , "w");
    try {
        RecordReader reader(input_dir.c_str(),DATA_MODEL);
        RecordTraceCollection& traces = reader.get_all_traces();

        int rank_all = traces.size();
        printf("%6d,\n", rank_all);
        int *comm_mark = new int[rank_all*rank_all]{0};
        //memset(comm_mark, 0 , rank_all*rank_all);

        comm_statistic(comm_mark, traces);

        for ( int i = 0; i < rank_all; i++){
            for ( int j = 0; j < rank_all-1; j++){
                fprintf(fp, "%6d,", comm_mark[i * rank_all + j]);
                //printf("%6d,", comm_mark[i * rank_all + j]);
                //printf("%6d,", i);
            }
            fprintf(fp, "%6d\n", comm_mark[i * rank_all + rank_all-1]);
        }
        fclose(fp);
        // RankMetaCollection& metas = reader.get_all_meta_maps();
        // DependancyGraph* graph = CreateDependancyGraph(traces, metas, false);
        // TimelineAlignment ta;
        // ta.align(traces, metas, *graph, 1, 1);
    } catch (fs::filesystem_error const& e) {
        std::cout << e.what() << std::endl;
        exit(1);
    }


    return 0;
}