/* AUTO GENERATED BY compile_type_defines.py */
#ifndef __RECORD_UTILS_H__
#define __RECORD_UTILS_H__
#include "record/record_type.h"
#include "record/wrap_defines.h"
#include <sstream>

namespace record_utils {

inline __attribute__((always_inline))
std::string get_record_name(record_t *r) {
    if (r->MsgType<0) {
        return std::string("Extended Events ("+std::to_string(r->MsgType)+")");
    }
    switch (r->MsgType) {
        __RECORD_MAP_IMPL;
    }
    return std::string("Unknown");
}

inline __attribute__((always_inline))
size_t get_record_size(record_t* r) {
    switch(r->MsgType) {
		case event_hipLaunchKernel: return sizeof(record_activity_launch_t);
		case event_hipMemcpy: return sizeof(record_activity_memcpy_t);
		case event_hipMemcpyAsync: return sizeof(record_activity_memcpy_async_t);
		case event_MPI_Send: return sizeof(record_comm_t);
		case event_MPI_Recv: return sizeof(record_comm_t);
		case event_MPI_Comm_rank: return sizeof(record_comm_rank_t);
		case event_MPI_Comm_dup: return sizeof(record_comm_dup_t);
		case event_MPI_Comm_split: return sizeof(record_comm_split_t);
		case event_MPI_Alltoall: return sizeof(record_all2all_t);
		case event_MPI_Alltoallv: return sizeof(record_all2all_t);
		case event_MPI_Allreduce: return sizeof(record_allreduce_t);
		case event_MPI_Reduce: return sizeof(record_reduce_t);
		case event_MPI_Bcast: return sizeof(record_bcast_t);
		case event_MPI_Barrier: return sizeof(record_barrier_t);
		case event_MPI_Isend: return sizeof(record_comm_async_t);
		case event_MPI_Irecv: return sizeof(record_comm_async_t);
		case event_MPI_Wait: return sizeof(record_comm_wait_t);
		case event_Memory_Malloc: return sizeof(record_memory_malloc);
		case event_Memory_Calloc: return sizeof(record_memory_calloc);
		case event_Memory_Realloc: return sizeof(record_memory_realloc);
		case event_Memory_Free: return sizeof(record_memory_free);

    }
    return sizeof(record_t);
}

inline __attribute__((always_inline))
std::string to_string(record_t* r) {
    std::stringstream ss;
    ss << "Event Name: " << record_utils::get_record_name(r) << "\n";
    ss << "Start Time: " << r->timestamps.enter << "\n";
    ss << "End Time: "   << r->timestamps.exit  << "\n";
    ss << "Duration: "   << r->timestamps.exit - r->timestamps.enter << "\n";
    ss << "Record Size: "<< get_record_size(r) << "\n";
    switch(r->MsgType) {
		case event_hipLaunchKernel:
		{
			record_activity_launch_t* rec = (record_activity_launch_t*)r;
			ss << "Correlation ID:" << rec->correlation_id << "\n";
			ss << ":" << rec->sharedMemBytes << "\n";
			ss << ":" << rec->stream << "\n";
			break;
		}
		case event_hipMemcpy:
		{
			record_activity_memcpy_t* rec = (record_activity_memcpy_t*)r;
			ss << "Correlation ID:" << rec->correlation_id << "\n";
			ss << ":" << rec->dst << "\n";
			ss << ":" << rec->src << "\n";
			ss << ":" << rec->sizeBytes << "\n";
			ss << ":" << rec->kind << "\n";
			break;
		}
		case event_hipMemcpyAsync:
		{
			record_activity_memcpy_async_t* rec = (record_activity_memcpy_async_t*)r;
			ss << "Correlation ID:" << rec->correlation_id << "\n";
			ss << ":" << rec->dst << "\n";
			ss << ":" << rec->src << "\n";
			ss << ":" << rec->sizeBytes << "\n";
			ss << ":" << rec->kind << "\n";
			ss << ":" << rec->stream << "\n";
			break;
		}
		case event_MPI_Send:
		case event_MPI_Recv:
		{
			record_comm_t* rec = (record_comm_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Dest/Src:" << rec->dest << "\n";
			ss << "Tag:" << rec->tag << "\n";
			ss << "Count:" << rec->count << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Comm_rank:
		{
			record_comm_rank_t* rec = (record_comm_rank_t*)r;
			ss << "MPI Comm:" << rec->comm << "\n";
			ss << "MPI Rank:" << rec->rank << "\n";
			break;
		}
		case event_MPI_Comm_dup:
		{
			record_comm_dup_t* rec = (record_comm_dup_t*)r;
			ss << "MPI Comm:" << rec->comm << "\n";
			ss << "New MPI Comm:" << rec->new_comm << "\n";
			break;
		}
		case event_MPI_Comm_split:
		{
			record_comm_split_t* rec = (record_comm_split_t*)r;
			ss << "MPI Comm:" << rec->comm << "\n";
			ss << "New MPI Comm:" << rec->new_comm << "\n";
			ss << "Color:" << rec->color << "\n";
			break;
		}
		case event_MPI_Alltoall:
		case event_MPI_Alltoallv:
		{
			record_all2all_t* rec = (record_all2all_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Send count:" << rec->sendcnt << "\n";
			ss << "Recv count:" << rec->recvcnt << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Allreduce:
		{
			record_allreduce_t* rec = (record_allreduce_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Count:" << rec->count << "\n";
			ss << "MPI Op:" << rec->op << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Reduce:
		{
			record_reduce_t* rec = (record_reduce_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Count:" << rec->count << "\n";
			ss << "Root:" << rec->root << "\n";
			ss << "MPI Op:" << rec->op << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Bcast:
		{
			record_bcast_t* rec = (record_bcast_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Count:" << rec->count << "\n";
			ss << "Root:" << rec->root << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Barrier:
		{
			record_barrier_t* rec = (record_barrier_t*)r;
			ss << "MPI Comm:" << rec->comm << "\n";
			break;
		}
		case event_MPI_Isend:
		case event_MPI_Irecv:
		{
			record_comm_async_t* rec = (record_comm_async_t*)r;
			ss << "Data type:" << rec->datatype << "\n";
			ss << "Type Size:" << rec->typesize << "\n";
			ss << "Dest/Src:" << rec->dest << "\n";
			ss << "Tag:" << rec->tag << "\n";
			ss << "Count:" << rec->count << "\n";
			ss << "MPI Comm:" << rec->comm << "\n";
			ss << "MPI Request:" << rec->request << "\n";
			break;
		}
		case event_MPI_Wait:
		{
			record_comm_wait_t* rec = (record_comm_wait_t*)r;
			ss << "MPI Request:" << rec->request << "\n";
			break;
		}
		case event_Memory_Malloc:
		{
			record_memory_malloc* rec = (record_memory_malloc*)r;
			ss << "PTR:" << rec->ptr << "\n";
			ss << "Size:" << rec->size_bytes << "\n";
			break;
		}
		case event_Memory_Calloc:
		{
			record_memory_calloc* rec = (record_memory_calloc*)r;
			ss << "PTR:" << rec->ptr << "\n";
			ss << "Size:" << rec->size_bytes << "\n";
			break;
		}
		case event_Memory_Realloc:
		{
			record_memory_realloc* rec = (record_memory_realloc*)r;
			ss << "PTR:" << rec->ptr << "\n";
			ss << "New PTR:" << rec->newptr << "\n";
			ss << "Size:" << rec->size_bytes << "\n";
			break;
		}
		case event_Memory_Free:
		{
			record_memory_free* rec = (record_memory_free*)r;
			ss << "PTR:" << rec->ptr << "\n";
			break;
		}

    }
    return ss.str();
}

};

#endif
